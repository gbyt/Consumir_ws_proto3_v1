//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Consumir_ws_proto3.Referencia_ws {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Referencia_ws.prototipo3Soap")]
    public interface prototipo3Soap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Suma", ReplyAction="*")]
        float Suma(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Suma", ReplyAction="*")]
        System.Threading.Tasks.Task<float> SumaAsync(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Resta", ReplyAction="*")]
        float Resta(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Resta", ReplyAction="*")]
        System.Threading.Tasks.Task<float> RestaAsync(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplica", ReplyAction="*")]
        float Multiplica(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Multiplica", ReplyAction="*")]
        System.Threading.Tasks.Task<float> MultiplicaAsync(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Divide", ReplyAction="*")]
        float Divide(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Divide", ReplyAction="*")]
        System.Threading.Tasks.Task<float> DivideAsync(float a, float b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface prototipo3SoapChannel : Consumir_ws_proto3.Referencia_ws.prototipo3Soap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class prototipo3SoapClient : System.ServiceModel.ClientBase<Consumir_ws_proto3.Referencia_ws.prototipo3Soap>, Consumir_ws_proto3.Referencia_ws.prototipo3Soap {
        
        public prototipo3SoapClient() {
        }
        
        public prototipo3SoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public prototipo3SoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public prototipo3SoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public prototipo3SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float Suma(float a, float b) {
            return base.Channel.Suma(a, b);
        }
        
        public System.Threading.Tasks.Task<float> SumaAsync(float a, float b) {
            return base.Channel.SumaAsync(a, b);
        }
        
        public float Resta(float a, float b) {
            return base.Channel.Resta(a, b);
        }
        
        public System.Threading.Tasks.Task<float> RestaAsync(float a, float b) {
            return base.Channel.RestaAsync(a, b);
        }
        
        public float Multiplica(float a, float b) {
            return base.Channel.Multiplica(a, b);
        }
        
        public System.Threading.Tasks.Task<float> MultiplicaAsync(float a, float b) {
            return base.Channel.MultiplicaAsync(a, b);
        }
        
        public float Divide(float a, float b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<float> DivideAsync(float a, float b) {
            return base.Channel.DivideAsync(a, b);
        }
    }
}
